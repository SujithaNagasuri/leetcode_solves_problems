You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 

Approach: (two pointer approach)
1. sort the array
2. maintian two pointers if sum of the elements in the two pointers is less than k it means we need to add more value therefore increement left pointer
3. if the sum of the elements in the two pointers is greater than the k it meand we need to decrease the sum therefore decrement right pointer
4. if their sum of equals to k then increase pair count and move both pointers to inwards.

class Solution {
    public int maxOperations(int[] nums, int k) {
        
        if(nums.length < 2)
        {
            return 0;
        }
        int left =0,right = nums.length-1;
        Arrays.sort(nums);
        int count=0;
        while(left < right)
        {
            if(nums[left] + nums[right] < k)
            {
                left++;
            }
            else if(nums[left]+nums[right] > k)
            {
                right--;
            }
            else{
                count++;
                left++;
                right--;
            }
            
        }
        return count;
    }
}








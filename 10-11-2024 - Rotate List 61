Given the head of a linked list, rotate the list to the right by k places.
Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Input: head = [0,1,2], k = 4
Output: [2,0,1]


1. find out the length of the linkedlist
2. makes the list circular by connecting last node to the first node
3. now move curr pointer to the Len - k node i.e; new head;
4. return new head;


class Solution {
    public ListNode rotateRight(ListNode head, int k) 
    {
        if(head == null || head.next == null)
        {
            return head;
        }
       int len = 1;
       ListNode curr = head;
       while(curr.next != null)
       { 
            len++;
            curr = curr.next;
       }
        curr.next = head;
        k = k % len;
        k = len - k;
        while(k-- > 0)
        {
            curr = curr.next;
        }
        head = curr.next;
        curr.next = null;
        return head;
    }
}

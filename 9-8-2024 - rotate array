Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Approach 1:Efficient
1.reverse array
2. then reverse first k elements
3. then reverse elements from k to end
EX: 1 2 3 4 5 6 7 ,k =3
1. 7 6 5 4 3 2 1
2. 5 6 7 4 3 2 1
3. 5 6 7 1 2 3 4

Approach 2:
1. (i+k)%nums.length gives index to store the element
2. like shift cipher

class Solution {
    public void rotate(int[] nums, int k) {
        // int[] ans = new int[nums.length];
        // for(int i=0;i<nums.length;i++)
        // {
        //     ans[(i+k) % nums.length] = nums[i];
        // }
        // for(int i=0;i<nums.length;i++)
        // {
        //     nums[i] =  ans[i];
        // }
        k = k % nums.length;
        reverse(nums,0,nums.length-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.length-1);


    }
    public void reverse(int[] nums,int start,int end)
    {
        while(start < end)
        {
            int temp = nums[start];
            nums[start++] = nums[end];
            nums[end--] = temp;
        }
    }
}

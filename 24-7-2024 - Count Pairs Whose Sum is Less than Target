Given a 0-indexed integer array nums of length n and an integer target, return the number of pairs (i, j) where 0 <= i < j < n and nums[i] + nums[j] < target.
Example 1:
Input: nums = [-1,1,2,3,1], target = 2
Output: 3
Explanation: There are 3 pairs of indices that satisfy the conditions in the statement:
- (0, 1) since 0 < 1 and nums[0] + nums[1] = 0 < target
- (0, 2) since 0 < 2 and nums[0] + nums[2] = 1 < target 
- (0, 4) since 0 < 4 and nums[0] + nums[4] = 0 < target
Note that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.

Appraoch1: BROUTEFORCE 
1. check all possible combination of pairs and increement count when ever there sum is less than the target

Approach2: TWOPOINTER
1.) Sort the array in ascending order. Sorting helps in efficiently exploring pairs with sums less than the target value.
2.) Initialize two pointers, left and right, pointing to the first and last elements of the sorted array, respectively.
3.) Initialize a variable count to keep track of the count of valid pairs.
While the left pointer is less than the right pointer:
If the sum of the elements at left and right is less than the target value, it means all pairs with the current left element will also satisfy the condition. 
So, increment the count by right - left and move the left pointer to the right.If the sum is greater than or equal to the target, move the right pointer to the left.
4.) Continue this process until the left pointer crosses the right pointer.

class Solution {
    public int countPairs(List<Integer> nums, int target) {
        int pc = 0 ;

        //bruteforce
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums.get(i) + nums.get(j) < target)
                {
                    pc++;
                }
            }
        }

        //two pointer
        int left = 0,right = nums.size()-1;
        Collections.sort(nums);
        while(left < right)
        {
            if(nums.get(left)+nums.get(right) < target)
            {
                pc += right-left;
                left++;
            }
            else 
            {
                right--;
            }
        }

        return pc;
    }
}

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.
Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0



1. bruteforce
class Solution {
    public int countNegatives(int[][] grid) {

        int count=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[i].length;j++)
            {
                if(grid[i][j] < 0)
                {
                    count++;
                }
            }
        }  
        return count; 
    }
}

2. Row wise binary search:
class Solution {
    public int countNegatives(int[][] grid) {
        int count = 0;
        for (int[] row : grid) {
            count += countRowWise(row);
        }
        return count;
    }

    private int countRowWise(int[] mat) {
        int lo = 0, hi = mat.length - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (mat[mid] >= 0) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return mat.length - hi - 1;
    }
}




You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode head = new ListNode(0);
        ListNode tail = head;
        int carry =0;   
        while(l1!=null || l2!= null || carry !=0)
        {
            int d1 = (l1 == null)?0:l1.val;
            int d2 = (l2 == null)?0:l2.val;
            int sum = d1+d2+carry;
            int digit = sum%10;
             carry = sum/10;

            ListNode newNode = new ListNode(digit);
            tail.next = newNode;
            tail = tail.next;

            l1 = (l1 == null)?null:l1.next;
            l2 = (l2 == null)?null:l2.next;
        }

        return head.next;
        
    }
}

Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.

 

Example 1:

Input: s = "(1+(2*3)+((8)/4))+1"

Output: 3

Explanation:

Digit 8 is inside of 3 nested parentheses in the string.

Example 2:

Input: s = "(1)+((2))+(((3)))"

Output: 3

Explanation:

Digit 3 is inside of 3 nested parentheses in the string.

class Solution {
    public int maxDepth(String s) 
    {
        // Stack<Character> stack = new Stack<>();
        // int count = 0;
        // for(char c:s.toCharArray())
        // {
        //     if(c == '(')
        //     {
        //         stack.push(c);
        //     }
        //     else if(c == ')')
        //     {
        //         count = Math.max(count,stack.size());
        //         stack.pop();
        //     }
        // }
        // return count;
        int count = 0, ans=0;
        for(char ch:s.toCharArray())
        {
            if(ch == '(')
            {
                count++;
            }
            else if(ch == ')')
            {
               
                count--;
            }
            ans = Math.max(ans,count);
        }
        return ans;
        
    }
}
